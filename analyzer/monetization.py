# analyzer/monetization.py - PRIMERA HERRAMIENTA DE MONETIZACI√ìN

from django.http import JsonResponse
from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.views.decorators.http import require_http_methods
from .models import UserProfile, AnalysisHistory
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

class MonetizationEngine:
    """
    Motor de monetizaci√≥n inteligente
    """
    
    @staticmethod
    def get_user_monetization_status(user):
        """Obtiene estado de monetizaci√≥n del usuario"""
        if not user.is_authenticated:
            return {
                'type': 'anonymous',
                'plan': 'none',
                'analyses_used': 0,
                'analyses_limit': 2,
                'analyses_remaining': 2,
                'should_show_upgrade': True,
                'urgency_level': 'high',
                'message': 'üö´ Solo 2 an√°lisis gratuitos por d√≠a. ¬°Reg√≠strate para 5 an√°lisis mensuales!'
            }
        
        profile = user.profile
        
        # Calcular urgencia basada en uso
        usage_percentage = (profile.analyses_this_month / profile.analyses_limit_monthly) * 100
        
        if usage_percentage >= 100:
            urgency = 'critical'
            message = 'üö® ¬°L√≠mite alcanzado! Upgrade para continuar generando estrategias.'
        elif usage_percentage >= 80:
            urgency = 'high'
            message = f'‚ö†Ô∏è Solo {profile.analyses_remaining} an√°lisis restantes este mes.'
        elif usage_percentage >= 60:
            urgency = 'medium'
            message = f'üìä {profile.analyses_remaining} an√°lisis disponibles. ¬øConsiderando upgrade?'
        else:
            urgency = 'low'
            message = f'‚úÖ {profile.analyses_remaining} an√°lisis disponibles.'
        
        return {
            'type': 'registered',
            'plan': profile.plan,
            'analyses_used': profile.analyses_this_month,
            'analyses_limit': profile.analyses_limit_monthly,
            'analyses_remaining': profile.analyses_remaining,
            'should_show_upgrade': profile.plan == 'free' and usage_percentage >= 60,
            'urgency_level': urgency,
            'message': message,
            'usage_percentage': round(usage_percentage, 1)
        }
    
    @staticmethod
    def get_upgrade_incentives(user_status):
        """Genera incentivos personalizados para upgrade"""
        incentives = []
        
        if user_status['type'] == 'anonymous':
            incentives = [
                "üéØ 5 an√°lisis mensuales vs 2 diarios",
                "üìä Historial permanente de tus estrategias", 
                "üìÑ Descarga ilimitada de PDFs",
                "üöÄ An√°lisis competitivos avanzados",
                "‚ö° Sin esperas entre an√°lisis"
            ]
        
        elif user_status['urgency_level'] == 'critical':
            incentives = [
                "üî• AN√ÅLISIS ILIMITADOS con Pro",
                "üìà An√°lisis competitivos avanzados",
                "üé® Plantillas premium exclusivas",
                "üìä M√©tricas y analytics detallados",
                "üèÜ Soporte prioritario 24/7"
            ]
        
        elif user_status['urgency_level'] == 'high':
            incentives = [
                "üìà 100 an√°lisis/mes con plan Pro",
                "üéØ An√°lisis competitivos incluidos",
                "üìä Templates premium",
                "üöÄ Procesamiento m√°s r√°pido"
            ]
        
        else:
            incentives = [
                "üöÄ Upgrade cuando llegues al l√≠mite",
                "üìà An√°lisis competitivos disponibles",
                "üé® Plantillas premium esper√°ndote"
            ]
        
        return incentives
    
    @staticmethod
    def should_block_analysis(user):
        """Determina si debe bloquear an√°lisis para monetizaci√≥n"""
        if not user.is_authenticated:
            # Verificar l√≠mite an√≥nimo (se hace en middleware)
            return False
        
        profile = user.profile
        
        # Bloquear si excede l√≠mite mensual (excepto premium)
        if profile.plan != 'premium' and profile.analyses_this_month >= profile.analyses_limit_monthly:
            return True
        
        return False

# Views de monetizaci√≥n
@login_required
def upgrade_page(request):
    """P√°gina de upgrade personalizada"""
    user_status = MonetizationEngine.get_user_monetization_status(request.user)
    incentives = MonetizationEngine.get_upgrade_incentives(user_status)
    
    # Planes con precios reales
    plans = [
        {
            'id': 'free',
            'name': 'Gratuito',
            'price': 0,
            'price_display': 'Gratis',
            'analyses_limit': 5,
            'features': [
                '‚úÖ 5 an√°lisis b√°sicos por mes',
                '‚úÖ Descarga en PDF', 
                '‚úÖ Historial personal',
                '‚ùå Sin an√°lisis competitivos',
                '‚ùå Sin plantillas premium'
            ],
            'current': user_status['plan'] == 'free',
            'popular': False
        },
        {
            'id': 'pro',
            'name': 'Profesional',
            'price': 19,
            'price_display': '$19/mes',
            'analyses_limit': 100,
            'features': [
                'üöÄ 100 an√°lisis por mes',
                'üéØ An√°lisis competitivos incluidos',
                'üìà Plantillas premium',
                'üìä Exportaci√≥n avanzada',
                '‚ö° Procesamiento prioritario'
            ],
            'current': user_status['plan'] == 'pro',
            'popular': True
        },
        {
            'id': 'premium',
            'name': 'Premium',
            'price': 49,
            'price_display': '$49/mes',
            'analyses_limit': 999999,
            'features': [
                'üî• An√°lisis ILIMITADOS',
                'üèÜ Todas las funciones Pro',
                'üé® Templates exclusivos',
                'üìû Soporte 24/7',
                'üöÄ API Access'
            ],
            'current': user_status['plan'] == 'premium',
            'popular': False
        }
    ]
    
    context = {
        'user_status': user_status,
        'incentives': incentives,
        'plans': plans,
        'urgency_message': user_status['message']
    }
    
    return render(request, 'analyzer/monetization/upgrade.html', context)

@require_http_methods(["POST"])
@login_required  
def process_upgrade(request):
    """Procesa upgrade de plan (integrar con Stripe aqu√≠)"""
    new_plan = request.POST.get('plan')
    
    if new_plan not in ['pro', 'premium']:
        return JsonResponse({'error': 'Plan inv√°lido'}, status=400)
    
    try:
        # Aqu√≠ integrar√≠as Stripe/PayPal
        # Por ahora, upgrade directo para testing
        profile = request.user.profile
        
        if new_plan == 'pro':
            profile.upgrade_plan('pro', 30)
            message = 'üéâ ¬°Upgrade a Pro exitoso! Ahora tienes 100 an√°lisis mensuales.'
        else:
            profile.upgrade_plan('premium', 30) 
            message = 'üî• ¬°Upgrade a Premium exitoso! An√°lisis ilimitados desbloqueados.'
        
        logger.info(f"üí∞ UPGRADE: {request.user.username} -> {new_plan}")
        
        return JsonResponse({
            'success': True,
            'message': message,
            'new_plan': new_plan,
            'redirect': '/'
        })
        
    except Exception as e:
        logger.error(f"Error processing upgrade: {e}")
        return JsonResponse({
            'error': 'Error procesando upgrade. Intenta de nuevo.'
        }, status=500)

def monetization_popup_data(request):
    """API para obtener datos del popup de monetizaci√≥n"""
    if request.user.is_authenticated:
        user_status = MonetizationEngine.get_user_monetization_status(request.user)
        incentives = MonetizationEngine.get_upgrade_incentives(user_status)
    else:
        user_status = MonetizationEngine.get_user_monetization_status(None)
        incentives = MonetizationEngine.get_upgrade_incentives(user_status)
    
    return JsonResponse({
        'user_status': user_status,
        'incentives': incentives,
        'show_popup': user_status['should_show_upgrade']
    })